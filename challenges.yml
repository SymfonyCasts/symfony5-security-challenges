make_user_2a:
  question: |
    Your "user" class can be called whatever you want... and *look* however you want... as
    long as it implements `UserInterface`. In Symfony 6, what info does `UserInterface` require
    your "user" class to provide?
  explanation: |
    In Symfony 6, the interface will only require `getUserIdentifier()`, `getRoles()` and
    `eraseCredentials()`. In this tutorial we DO have the other methods on `User`, but
    only because they're deprecated... and in Symfony 6 you CAN still have a "hashed password",
    but only if you need it. For the purposes of this question, I'm ignoring `eraseCredentials()`
    because it doesn't "provide" any information.
  features:
    multiple_choice:
      choices:
        a: |
          `UserInterface` requires your user to have a "user identifier" and an array of "roles".
        b: |
          `UserInterface` requires your user to have a "user identifier", an array of "roles"
          and a "hashed password".
        c: |
          `UserInterface` requires your user to have a "username", "user identifier", an array
          of "roles" and a "hashed password".
      correct: a

make_user_2b:
  question: |
    Does your `User` class need to be a Doctrine entity?
  explanation: |
    Here, we should explain that if your `User` class is NOT a Doctrine entity, then `make:user`
    would generate a custom "user provider" class where you would need to do some manual work.
    If you use an entity, you get to use the built-in entity provider that we see in
    `security.yaml`.
  features:
    multiple_choice:
      choices:
        a: |
          Technically no, but you'll need to create your own authenticator system to support
          a non-entity `User` class.
        b: |
          No: you're free to make your `User` class a Doctrine entity or not.
        c: |
          Yes. But it's no problem: if you load users data from somewhere else (e.g. an API),
          just store a local "cache" of that data in your local database.
      correct: b

firewalls_authenticator_5:
  question: |
    Check out the following firewalls setup in `security.yaml`:

    ```yaml
    security:
        # ...
        firewalls:
            main_firewall:
                pattern: ^/api/
                # ...
                custom_authenticator: App\Security\MainApiAuthenticator

            products_firewall:
                pattern: ^/api/product
                # ...
                custom_authenticator: App\Security\ProductApiAuthenticator
    ```

    If I make a request to `/api/product`, which authenticators will be executed?
  explanation: |
    The explanation here is mostly that... this is terrible example! First, yes, only 1 firewall
    is EVER active on a request, and it figures it out by starting from the top and finding
    the FIRST firewall that matches the URL. But more importantly, it almost never makes sense
    to have two firewalls.... even if you have two different ways to authenticate. This should
    be moved to one firewall. The exception to that rule is if you have, for example, a frontend
    that has one `User` class and an API under `/api/` where, if you log in, you will be logged
    in as a completely different user class - e.g. `ApiUser`.
  features:
    multiple_choice:
      choices:
        a: |
          Both authenticators will be executed because both firwalls match the current URL
          and will be activated.
        b: |
          Only `MainApiAuthenticator` will be executed because that one firewall matches first.
        c: |
          Only `ProductApiAuthenticator` will be executed because its firewall matches closer
          and will be executed first.
      correct: b

passport_6:
  question: |
    We know that the `supports()` method in an authenticator is called at the start of *every*
    single request. What happens if we return `false` from this method?
  features:
    multiple_choice:
      choices:
        a: |
          The request continues like normal and the controller for that page is executed.
        b: |
          Authentication fails & the `onAuthenticationFailure()` method is called.
        c: |
          The `supports()` method on any other authenticators is called. And if all of those
          return `false`, access is denied.
      correct: a

success_user_provider_8:
  question: |
    In our app, we're using the `entity` user provider:

    ```yaml
    security
        # ...
        providers:
            app_user_provider:
                entity:
                    class: App\Entity\User
                    property: email
    ```

    In theory, could we design a security system that *never* actually *called* any methods
    on our user provider?
  explanation: |
    First, yes, you DO need to configure the `providers` key in `security.yaml`. But
    whether or not any methods are actually called on it depends on your app. Your
    user provider is called in two main situations:

    1. To load the user in your authenticator (unless you pass a custom user loader function).
    2. To refresh the user at the start of your request (unless you set `stateless: true`
       for your firewall, which you can do for API-only apps).

    So, in just the right situation, your user loader will never be called.

    But the user provider will *also* be called if you use certain features, like
    `remember_me` or `switch_user`.

    TL;DR You probably need a user provider, but it does mostly boring background work for us.
  features:
    multiple_choice:
      choices:
        a: |
          Yes: If you used a "stateless" firewall (one that doesn't store the user in the
          session between requests) and passed a custom user loader in your authenticator
          (like we are).
        b: |
          No: At the very least, the user provider is needed to "refresh" the user on every
          request.
        c: |
          No: The user provider is used in various spots. For example, the web debug toolbar
          uses it to tell us who is logged in.
      correct: a

auth_errors_9:
  question: |
    Check out this code in our authenticator:

    ```php
    public function authenticate(Request $request): Passport
    {
        $email = $request->request->get('email');
        $password = $request->request->get('password');

        if ($email === 'ryan@symfonycasts.com') {
            throw new UserNotFoundException('Get outta here Ryan!');
        }

        return new Passport(new UserBadge($email), new PasswordCredentials($password));
    }

    public function onAuthenticationFailure(Request $request, AuthenticationException $exception): Response
    {
        dd($exception);
    }
    ```

    If I try to login as `ryan@symfonycasts.com`, what type of object will be dumped inside
    `onAuthenticationFailure()`? And if we redirected to `/login` and rendered that error,
    what text would be displayed?
  explanation: |
    This is a fun one! First, it's legal to throw an `AuthenticationException` (or sub-class)
    from *anywhere* during the authentication process. So throwing this exception directly
    in `authenticate()` is just fine.

    Next, whatever exception you throw is directly passed to `onAuthenticationFailure()`.
    The only exception to that rule is `UserNotFoundException`, which *may* or may not be
    converted to a `BadCredentialsException`, depending on your config.

    Finally, you *are* free to pass a custom message to an authentication exception... but
    it's never used! Instead, each class has a `getMessageKey()` method that returns
    a hard-coded explanation string. If you *do* need to send the user a very customized
    message, there *is* a special class for that called `CustomUserMessageAuthenticationException`
    that we'll talk about later.
  features:
    multiple_choice:
      choices:
        a: |
          The exception class would either be `UserNotFoundException` or `BadCredentialsException`
          based on whether or not you have `hide_user_not_found` in your `security.yaml`.
          The user would see `Get outta here Ryan!`
        b: |
          The exception class would either be `UserNotFoundException` or `BadCredentialsException`
          based on whether or not you have `hide_user_not_found` in your `security.yaml`.
          The user would see `Username could not be found.`
        c: |
          The `onAuthenticationFailure()` method would actually *not* be called because you
          can't throw that exception from directly inside `authenticate()`: you can only throw
          it from inside a "user loader" callback, like we have in the tutorial.
      correct: b

password_credentials_12:
  question: |
    I've created a custom authenticator and need to check to make sure the user's password
    is correct. Here is the `authenticate()` method:

    ```php
    public function authenticate(Request $request): PassportInterface
    {
        $email = $request->request->get('email');
        $password = $request->request->get('password');

        return new Passport(
            new UserBadge($email),
            new PasswordCredentials($password)
        );
    }
    ```

    Will this correctly validate the user's password?
  explanation: |
    The entire purpose of `PasswordCredentials` is to give you an easy way to return
    the plain-text password and let someone else (an event listener!) do the hard work
    of checking it against the hashed password in the database. And, thanks to the fact
    that all badges must be "resolved" (and "credentials" objects are just badges),
    if the listener that checks the password fails to run for any reason, authentication
    will automatically fail.
  features:
    multiple_choice:
      choices:
        a: |
          Yes. You pass the plain-text submitted password to `PasswordCredentials`
          and then you are guaranteed that some other process will check to make sure
          the password is correct (if it is not, authentication will fail).
        b: |
          Maybe. This is correct, but if your `password_hashers` configuration is not
          correct, then nothing will validate the submitted password.
        c: |
          No. This simply passes the plain-text password to `PasswordCredentials`,
          but it fails to actually check that it is valid!
      correct: a

remember_me_14:
  question: |
    Our "remember me" checkbox looks like this:

    ```twig
    <input type="checkbox" name="_remember_me"> Remember me
    ```

    What would happen if we renamed the checkbox to `allow_remember_me`? If I checked it
    and submitted, would the `REMEMBERME` cookie be set?
  explanation: |
    Unlike the `CsrfTokenBadge`, we don't manually read the "remember me" checkbox POST
    data and pass it to the `RememberMeBadge`. Instead, the "remember me" system looks for
    the POST'ed checkbox data all by itself. And, by default, it expects the name of that
    data to be `_remember_me`. However, this *is* something that can be configured in
    `security.yaml`, by setting:
    ```yaml
    security:
        firewalls:
            main:
                remember_me:
                    remember_me_parameter: allow_remember_me
    ```
  features:
    multiple_choice:
      choices:
        a: |
          Yes, as long as you read the new `allow_remember_me` POST parameter and pass it
          to the `RememberMeBadge`.
        b: |
          Yes, as long as you configured the new name beneath the `remember_me` configuration
          in `security.yaml`.
        c: |
          No, the remember me system knows to look for a checkbox with the exact name
          `_remember_me`.
      correct: b

password_credentials_21:
  question: |
    Which of the following is *not* a valid way to deny access in a controller?
  explanation: |
    The *real* secret to denying access in Symfony is to throw an `AccessDeniedException`. In
    fact, no matter *how* you deny access, this exception is always thrown behind the scenes.
    You can throw it manually, call `denyAccessUnlessGranted()` (which throws it for you) or
    use the `IsGranted()` attribute/annotation from SensioFrameworkExtraBundle, which *also*
    throws that exception.
  features:
    multiple_choice:
      choices:
        a: |
          ```php
          $this->denyAccessUnlessGranted('ROLE_ADMIN');
          ```
        b: |
          ```php
          if (!$this->isGranted('ROLE_ADMIN')) {
              throw new AccessDeniedException('Get outta here!');
          }
          ```
        c: |
          ```
          #[IsGranted('ROLE_ADMIN')]
          public function kittenPage()
          {
              // ...
          }
          ```
        d: |
          These are all valid ways to deny access!
      correct: d

is_auth_23:
  question: |
    Imagine I have the following link in Twig:

    ```twig
    {% if is_granted('IS_AUTHENTICATED_REMEMBERED') %}
        <a href="{{ path('app_change_password') }}">Change Password</a>
    {% endif %}
    ```

    And this code in the controller:

    ```php
    /**
     * @Route("/change/password", name="app_change_password")
     */
    public function changePassword()
    {
        $this->denyAccessUnlessGranted('IS_AUTHENTICATED_FULLY');
    }
    ```

    Does this code make sense?
  explanation: |
    If a user is only authenticated thanks to a "remember me" cookie and then they are
    denied access, Symfony is smart enough to redirect them to the login page so that
    they can "fully" login. This is a *perfect* way to organize a change password page!
  features:
    multiple_choice:
      choices:
        a: |
          This code does *not* make sense. You should change the Twig code to check
          for `IS_AUTHENTICATED_FULLY` to match the controller. Otherwise, if a user
          that is only authenticated thanks to their "remember me" cookie clicks the link,
          they will get an access denied screen!
        b: |
          This code *does* technically make sense... as long as the system is not using
          a "remember me" cookie system.
        c: |
          This code *does* make sense. If a user that is only authenticated thanks to their
          "remember me" cookie clicks the link, Symfony redirect them to the login page.
      correct: c

impersonation_27:
  question: |
    I'm working on adding the `switch_user` feature to my site. To switch, I know that
    I can add `?_switch_user=` to the end of any URL. But... instead of using the user's
    email address, I want to be able to use the user's `id` in the URL. Is that possible?
  explanation: |
    If you add `?_switch_user=5` to the end of a URL, that `5` (or whatever you put
    there) is passed to your user provider. In our project, thanks to some config
    in `security.yaml`, our user provider queries using the `email` property. But
    you could also change that to be `id` (just beware that the `form_login` authenticator
    also uses the user provider!).

    You could also condfigure a second user provider in `security.yaml` and use the
    original one as your "main" user provider, and then, under the `switch_user` config,
    use the other one *just* for it. Something like this:

    ```
    security:
        providers:
            main_provider:
                entity:
                   class: App\Entity\User
                   property: email
            by_id_provider:
                entity:
                   class: App\Entity\User
                   property: id

        firewalls:
             main:
                # tell your firewall to use this as its main provider
                provider: main_provider

                switch_user:
                   # tell switch_user to use the *other* provider
                   provider: by_id_provider
    ```
  features:
    multiple_choice:
      choices:
        a: |
          Yes: you can use either the `email` or `id` out-of-the-box.
        b: |
          No: only the value returned from `getUserIdentifier()` can be used.
        c: |
          Yes: there is an option under `switch_user` to choose which property to query.
        d: |
          Yes: by configuring your user provider.
      correct: d

manual_auth_31:
  question: |
    In our controller, when we called `$userAuthenticator->authenticateUser()`, we
    *returned* that value. Why? What is the *real* benefit of this?
  explanation: |
    It *is* true that returning this might help centralize some redirect logic, but that's
    super minor. The *biggest* benefit is that your authenticator's `onAuthenticationSuccess()`
    method knows to handle the "target path". In other words, your authenticator knows how to
    redirect back to the page the user was originally trying to view. By reusing that logic,
    we get the same behavior after registration. Booya!
  features:
    multiple_choice:
      choices:
        a: |
          Simple centralization and removing duplication. Instead of having logic to
          redirect the user in the authenticator *and* in our controller, we can just
          return this value and remove the extra redirect logic in the controller.
        b: |
          This is needed so that we return the same response as the authenticator. Without
          this, the session cookie can't be sent back to the user.
        c: |
          If the user originally went to a page that required authentication (e.g. `/checkout`),
          then eventually went to the registration form and submitted it, this will redirect
          the user back to their original page (i.e. `/checkout`).
      correct: c

voters_34:
  question: |
    Check out the following code:

    ```php
    public function someController()
    {
        $this->denyAccessUnlessGranted('BANANA');
    }
    ```

    Assuming that I'm using the normal security system with nothing custom, what
    will happen when we execute this code?
  explanation: |
    When this code is executed, Symfony will ask each voter whether they know how to vote
    on the attribute `BANANA`. The two voters that you get out of the box know how to vote
    on strings starting with `ROLE_` and `IS_AUTHENTICATED_`... but not `BANANA`. So both
    will return `ACCESS_ABSTAIN`. If all voters "abstain", for safety purposes, access
    is denied.

    But you won't get an error because... you're really free to pass *any* value to
    the authorization system.
  features:
    multiple_choice:
      choices:
        a: |
          The security system will grant access because no voters understand this attribute.
        b: |
          The security system will deny access because no voters understand this attribute.
        c: |
          An `InvalidArgumentException` will be thrown because `BANANA` (while delicious),
          does not start with `ROLE_` or `IS_AUTHENTICATED_`.
      correct: b
